# -*- coding: utf-8 -*-
import datetime
import os
import pprint
import re
import shutil
import time

import pytz
import requests
import telegram.error
import urllib3
from pytube import YouTube
from pytube import exceptions as pytube_exceptions
from telegram import Update, InputMediaVideo, InputMediaPhoto, InlineKeyboardMarkup, \
    InlineKeyboardButton, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler
from telegram.helpers import create_deep_linked_url

import cfg
import channel_points_module
import database
import cfg


from logging_settings import logger
from database import update_user_info
from cfg import SEND_TIKTOK_DEEPLINK
from cfg import WAITING_FOR_TIKTOK, WAITING_FOR_TIKTOK_DESISION
from cfg import APPROVE_TIKTOK, REJECT_TIKTOK, \
    STOP_TIKTOKS_APPROVAL, BAN_TIKTOK_SENDER, SUPER_APPROVE_TIKTOK

MAIN_BROADCASTER_ID = cfg.config_data['TWITCH_NOTIFICATIONS']['MAIN_BROADCASTER_ID']
TEST_BROADCASTER_ID = cfg.config_data['TWITCH_NOTIFICATIONS']['TEST_BROADCASTER_ID']
CHATS = cfg.config_data['CHATS']


async def start_tiktok_evening(update: Update,
                               context: ContextTypes.DEFAULT_TYPE):
    if MAIN_BROADCASTER_ID not in context.bot_data:
        context.bot_data[MAIN_BROADCASTER_ID] = {}
    context.bot_data[MAIN_BROADCASTER_ID]['tiktok_event_active'] = True
    context.bot_data[MAIN_BROADCASTER_ID]['tiktok_evening_active'] = True
    context.bot_data[MAIN_BROADCASTER_ID]['video_evening_active'] = False
    bot = await context.bot.get_me()
    url = create_deep_linked_url(bot.username, f'{SEND_TIKTOK_DEEPLINK}')
    threads = ['tiktoks', 'comments']
    text = '''
–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–æ—Ä –≤–∏–¥–µ–æ –Ω–∞ –¢–∏–∫-–¢–æ–∫ –≤–µ—á–µ—Ä–æ–∫! 
–ü—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å—Ç–µ –≤–∏–¥–µ–æ –±–æ—Ç—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É.
–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ –°–ö–ê–ß–ê–ù–ù–´–ï —Å —Ç–∏–∫-—Ç–æ–∫–∞! –°—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∏–∫-—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)'''
    for thread in threads:
        await context.bot.send_message(cfg.FORUM_ID, text, message_thread_id=cfg.config_data['CHATS']['FORUM_THREADS'][thread],
                                       reply_markup=InlineKeyboardMarkup(
                                           [[InlineKeyboardButton(
                                               "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–∫—Ç–æ–∫", url=url)]]))


async def start_video_evening(update: Update,
                              context: ContextTypes.DEFAULT_TYPE):
    if MAIN_BROADCASTER_ID not in context.bot_data:
        context.bot_data[MAIN_BROADCASTER_ID] = {}
        context.bot_data[MAIN_BROADCASTER_ID]['tiktok_event_active'] = True
    context.bot_data[MAIN_BROADCASTER_ID]['tiktok_evening_active'] = False
    context.bot_data[MAIN_BROADCASTER_ID]['video_evening_active'] = True
    bot = await context.bot.get_me()
    url = create_deep_linked_url(bot.username, f'{SEND_TIKTOK_DEEPLINK}')
    threads = ['tiktoks', 'comments']
    text = '''
–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–æ—Ä —Ç–∏–∫—Ç–æ–∫–æ–≤ –Ω–∞ –≤–∏–¥–µ–æ –≤–µ—á–µ—Ä–æ–∫! 
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ —Å—Ç—Ä–∏–º–µ—Ä –ø–æ—Å–º–æ—Ç—Ä–∏—Ç –ø—Ä—è–º–æ –Ω–∞ —Å—Ç—Ä–∏–º–µ! (–ù–æ —Å–ø–µ—Ä–≤–∞ –æ–Ω–∏ –ø—Ä–æ–π–¥—É—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é, —Ç–∞–∫ —á—Ç–æ –∑–∞–ø—Ä–µ—Ç–∫–∏ –∫–∏–¥–∞—Ç—å –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ)
–ü—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å—Ç–µ –≤–∏–¥–µ–æ –±–æ—Ç—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É.
–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ –°–ö–ê–ß–ê–ù–ù–´–ï —Å —Ç–∏–∫-—Ç–æ–∫–∞! –°—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∏–∫-—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)'''
    for thread in threads:
        await context.bot.send_message(cfg.FORUM_ID, text, message_thread_id=cfg.config_data['CHATS']['FORUM_THREADS'][thread],
                                       reply_markup=InlineKeyboardMarkup(
                                           [[InlineKeyboardButton(
                                               "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–∫—Ç–æ–∫", url=url)]]))


@update_user_info
async def waiting_for_tiktok(update: Update,
                             context: ContextTypes.DEFAULT_TYPE):
    logger.debug(
        f'{update.effective_user.name}({update.effective_user.id}) –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /send_tiktok')
    if not ('tiktok_event_active' in context.bot_data[MAIN_BROADCASTER_ID] and context.bot_data[MAIN_BROADCASTER_ID][
                'tiktok_event_active'] is True):
        logger.debug(
            f'{update.effective_user.name}({update.effective_user.id}). –¢–∏–∫—Ç–æ–∫ –≤–µ—á–µ—Ä–æ–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –û—Ç–º–µ–Ω—è–µ–º')
        await context.bot.send_message(update.effective_chat.id,
                                       '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–∫—Ç–æ–∫–∏.'
                                       '–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ')
        return ConversationHandler.END
    unapproved_tiktoks_count = database.count_unapproved_tiktoks(update.effective_user.id)['count']
    user_info = context.user_data['user_info']
    can_send_tiktok = user_info['can_send_tiktok']
    print(f'can_send_tiktok - {can_send_tiktok}')
    if not can_send_tiktok:
        tiktoks_banned_until = user_info['tiktoks_banned_until']
        print(f'tiktoks_banned_until - {tiktoks_banned_until},'
              f'datetime.now() - {datetime.datetime.now()}')
        if tiktoks_banned_until < datetime.datetime.now():
            can_send_tiktok = True
            database.unban_user_from_tiktoks(update.effective_user.id)
    if unapproved_tiktoks_count > 19:
        await context.bot.send_message(update.effective_chat.id,
                                       '–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 20 –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ –æ–¥–Ω–æ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏. –ü–æ–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ')
    elif not can_send_tiktok:
        time_banned_string = tiktoks_banned_until.strftime("%Y-%m-%d %H:%M:%S")
        await context.bot.send_message(update.effective_chat.id,
                                       f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–∫—Ç–æ–∫–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–µ–Ω—ã —Å—Ç—Ä–∏–º–µ—Ä–æ–º (–¥–æ {time_banned_string})')
    else:
        logger.debug(
            f'{update.effective_user.name}({update.effective_user.id}) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–∞–π–ª')
        await context.bot.send_message(update.effective_chat.id,
                                       '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∏–¥–µ–æ —Ç–∏–∫—Ç–æ–∫–∞. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ 1 –≤–∏–¥–µ–æ. –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –º–Ω–æ–≥–æ - —è –ø—Ä–∏–º—É —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ')
        return ConversationHandler.END


@update_user_info
async def download_youtube_short(update: Update,
                                 context: ContextTypes.DEFAULT_TYPE,
                                 video_url):
    if not (re.match("^https://(www.)?youtube\.", video_url) or re.match(
            "^https://youtu.be", video_url)):
        await context.bot.send_message(update.effective_chat.id,
                                       "–°—Å—ã–ª–∫–∞ –Ω–µ –∏–∑ youtube shorts. –Ø –ø–æ–∫–∞ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –∏–∑ youtube shorts. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ /cancel")
        return WAITING_FOR_TIKTOK

    try:
        video = YouTube(video_url)
        print(f'video - {video}')
        if video.length > 60:
            await context.bot.send_message(update.effective_chat.id,
                                           "–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤–∏–¥–µ–æ –¥–æ 1 –º–∏–Ω—É—Ç—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel")
            return WAITING_FOR_TIKTOK
        try:
            stream = video.streams.filter(progressive=True,
                                          file_extension='mp4').order_by(
                'resolution').desc().first()
            return stream.download()
        except pytube_exceptions.VideoUnavailable:
            await context.bot.send_message(update.effective_chat.id,
                                           '–≠—Ç–æ –≤–∏–¥–µ–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ /cancel')
            return WAITING_FOR_TIKTOK
    except pytube_exceptions.RegexMatchError:
        await context.bot.send_message(update.effective_chat.id,
                                       "–°—Å—ã–ª–∫–∞ –Ω–µ –∏–∑ youtube shorts. –Ø –ø–æ–∫–∞ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –∏–∑ youtube shorts. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ /cancel")
        return WAITING_FOR_TIKTOK


@update_user_info
async def download_tiktok_video(update: Update,
                                context: ContextTypes.DEFAULT_TYPE,
                                tiktok_url):
    api_url = "https://aiov-download-youtube-videos.p.rapidapi.com/GetVideoDetails"
    querystring = {"URL": tiktok_url}
    headers = {
        "X-RapidAPI-Key": cfg.config_data['KEYS']['X_RAPID_API_KEY'],
        "X-RapidAPI-Host": "aiov-download-youtube-videos.p.rapidapi.com"
    }
    response = requests.request("GET", api_url, headers=headers,
                                params=querystring)
    if response.status_code != 200:
        await context.bot.send_message(update.effective_chat.id,
                                       '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏. –õ—É—á—à–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–º')
        return None
    response = response.json()
    if response['extractor'] != 'TikTok':
        await context.bot.send_message(update.effective_chat.id,
                                       '–§–∞–π–ª –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–µ –∏–∑ —Ç–∏–∫—Ç–æ–∫–∞. –Ø –ø–æ–∫–∞ –º–æ–≥—É —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–∏–∫—Ç–æ–∫–∏ üò¢. –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –≤–∏–¥–µ–æ')
        return None
    extension = response['ext']
    if extension != 'mp4' and extension != 'mov':
        await context.bot.send_message(update.effective_chat.id,
                                       '–Ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–∞–∫–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫–∞–∫ –≤ —Ñ–∞–π–ª–µ –∏–∑ —Å—Å—ã–ª–∫–∏. –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –≤–∏–¥–µ–æ')
        return None
    if response['filesize'] > 52428800:
        await context.bot.send_video(update.effective_chat.id,
                                     '–§–∞–π–ª –∏–∑ —Å—Å—ã–ª–∫–∏ –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ 50 –º–±. –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –≤–∏–¥–µ–æ')
        return None
    file_name = f'tiktok_video-{update.effective_user.id}.mp4' if extension == 'mp4' else f'tiktok_video_{update.effective_user.id}.mov'
    url = response['formats'][0]['url']
    print(url)
    connection = urllib3.PoolManager()
    with connection.request('GET', url, preload_content=False) as resp, open(
            file_name, 'wb') as out_file:
        shutil.copyfileobj(resp, out_file)

    resp.release_conn()
    return file_name


@update_user_info
async def got_tiktok_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = await got_tiktok(update, context, is_file=True)
    return state


@update_user_info
async def got_tiktok_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = await got_tiktok(update, context, is_file=False)
    return state


@update_user_info
async def got_tiktok(update: Update,
                     context: ContextTypes.DEFAULT_TYPE,
                     is_file):
    pprint.pprint(update)
    if not ('tiktok_event_active' in context.bot_data[MAIN_BROADCASTER_ID] and
            context.bot_data[MAIN_BROADCASTER_ID]['tiktok_event_active'] is True):
        logger.debug(
            f'{update.effective_user.name}({update.effective_user.id}). –¢–∏–∫—Ç–æ–∫/–≤–∏–¥–µ–æ –≤–µ—á–µ—Ä–æ–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –û—Ç–º–µ–Ω—è–µ–º')
        await context.bot.send_message(update.effective_chat.id,
                                       '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–∫—Ç–æ–∫–∏.'
                                       '–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ')
        return ConversationHandler.END
    is_for_live = 'video_evening_active' in context.bot_data[MAIN_BROADCASTER_ID].keys() and context.bot_data[MAIN_BROADCASTER_ID]['video_evening_active'] is True
    unapproved_tiktoks_count = \
    database.count_unapproved_tiktoks(update.effective_user.id, is_for_live)['count']
    user_info = context.user_data['user_info']
    can_send_tiktok = user_info['can_send_tiktok']
    print(f'can_send_tiktok - {can_send_tiktok}')
    if not can_send_tiktok:
        tiktoks_banned_until = user_info['tiktoks_banned_until']
        if tiktoks_banned_until < datetime.datetime.now():
            can_send_tiktok = True
            database.unban_user_from_tiktoks(update.effective_user.id)
    if unapproved_tiktoks_count > 19:
            await context.bot.send_message(update.effective_chat.id,
                                           '–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 20 –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ –æ–¥–Ω–æ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏. –ü–æ–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–∫—Ç–æ–∫–∏')

    elif not can_send_tiktok:
        time_banned_string = tiktoks_banned_until.strftime("%Y-%m-%d %H:%M:%S")
        await context.bot.send_message(update.effective_chat.id,
                                       f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–∫—Ç–æ–∫–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–µ–Ω—ã —Å—Ç—Ä–∏–º–µ—Ä–æ–º (–¥–æ {time_banned_string})')
    else:
        if is_file:
            message = await context.bot.forward_message(cfg.TIKTOK_FILES_GROUP_ID,
                                                        update.effective_chat.id,
                                                        update.effective_message.id)
        else:
            result = await download_youtube_short(update, context,
                                                  update.effective_message.text)
            if result == WAITING_FOR_TIKTOK:
                return WAITING_FOR_TIKTOK
            file_path = result
            message = await context.bot.send_video(cfg.TIKTOK_FILES_GROUP_ID,
                                                   video=file_path,
                                                   caption=update.message.text)
            os.remove(file_path)
        file_id = message.video.file_id
        forwarded_message_id = message.message_id
        is_approved = update.effective_user.id == cfg.STREAMER_USER_ID
        info = database.add_tiktok(forwarded_message_id, update.effective_user.id,
                                   file_id,
                                   is_approved, update.effective_message.id,
                                   is_for_live=is_for_live)

        message_text = '–Ø –ø–æ—Å–º–æ—Ç—Ä—é, –∞ –ø–æ–∫–∞' if not is_approved \
            else '–¢–∏–∫—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ,'
        unapproved_count = database.count_unapproved_tiktoks(update.effective_user.id)['count']
        if unapproved_count <= 19:
            message_text += (f' –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ ({"/send_video" if is_for_live else "send_tiktok"} –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '
                             f'–æ—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ —Å—é–¥–∞)')
        else:
            message_text += ' –æ—Ç–¥–æ—Ö–Ω–∏) –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ. –Ø –Ω–∞–ø–∏—à—É, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë'
        if unapproved_count == 5:
            context.bot.send_message(cfg.STREAMER_USER_ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.full_name} —É–∂–µ –∏–º–µ–µ—Ç 5 –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ç–∏–∫—Ç–æ–∫–æ–≤. –°–∫–æ—Ä–æ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–∫—Ç–æ–∫–∏. –ü–æ—Ä–∞ –±—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å :)')
        await context.bot.send_message(update.effective_chat.id, message_text)
        if is_for_live:
            await send_video_for_moderation(update, context, info)
        return ConversationHandler.END


@update_user_info
async def got_wrong_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.effective_attachment is not None:
        await context.bot.send_message(update.effective_chat.id,
                                       '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –≤–∏–¥–µ–æ, –∞ –¥—Ä—É–≥–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ç–∏–∫—Ç–æ–∫–∞')
    else:
        await context.bot.send_message(update.effective_chat.id,
                                       '–Ø –∂–¥—É *–≤–∏–¥–µ–æ* —Å —Ç–∏–∫—Ç–æ–∫–æ–º',
                                       parse_mode=ParseMode.MARKDOWN_V2)
    return WAITING_FOR_TIKTOK


@update_user_info
async def cancel_waiting_for_tiktok(update: Update,
                                    context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(update.effective_chat.id,
                                   '–û–∫. –û—Ç–º–µ–Ω–∏–ª. –¢–µ–ø–µ—Ä—å —è –Ω–∏—á–µ–≥–æ –Ω–µ –∂–¥—É')
    return ConversationHandler.END


@update_user_info
async def publish_tiktoks(update: Update,
                          context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in [cfg.STREAMER_USER_ID, cfg.TEST_STREAMER_USER_ID]:
    # if update.effective_user.id == cfg.TEST_STREAMER_USER_ID:
        media = []
        caption = '–°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∫—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤–∏–¥–µ–≤–∞!)\n'
        names = []
        ticktoks = database.select_tiktoks_to_send()
        if ticktoks is not None:
            for ticktok in ticktoks:
                user = await database.get_user_info(ticktok["sender_user_id"])
                media.append(InputMediaVideo(ticktok['file_id']))
                # if update.effective_user.id != cfg.STREAMER_USER_ID:
                names.append(user["full_name"])
                    # caption = caption + f'{ticktoks.index(ticktok) + 1}–π —Ç–∏–∫—Ç–æ–∫ –ø—Ä–∏—Å–ª–∞–ª(–∞) {user["full_name"]}\n'
            logger.debug(
                f'{update.effective_user.name}({update.effective_user.id}) names - {names}')
            caption += cfg.generate_tiktok_senders_string(names)
            logger.debug(
                f'{update.effective_user.name}({update.effective_user.id}) caption - {caption}')
            threads = ['tiktoks', 'comments']
            for thread in threads:
                await context.bot.send_media_group(cfg.FORUM_ID,
                                                   media=media, caption=caption, message_thread_id=cfg.config_data['CHATS']['FORUM_THREADS'][thread])
                time.sleep(5)
            msg = await context.bot.send_media_group(cfg.CHANNEL_ID,
                                                     media=media, caption=caption)
            # context.bot_data['searching_for_post'] = True
            # context.bot_data['post_message_text'] = msg.text
            for tiktok in ticktoks:
                logger.debug(
                    f'{update.effective_user.name}({update.effective_user.id}) Tiktok - {tiktok}')
                database.tiktok_posted(tiktok['tiktok_id'])
            # threads = [6, None]
            # for thread in threads:
            #     await context.bot.send_media_group(-1001646261936,
            #                                        media=media, caption=caption, message_thread_id=thread)
            #     time.sleep(5)
            # for tiktok in ticktoks:
            #     database.tiktok_posted(tiktok['tiktok_id'])

        else:
            await context.bot.send_message(update.effective_chat.id,
                                           '–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∏–∫—Ç–æ–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')


@update_user_info
async def show_tiktok_to_approve(update: Update,
                                 context: ContextTypes.DEFAULT_TYPE):
    # if update.effective_user.id == cfg.TEST_STREAMER_USER_ID:
    if update.effective_user.id in [cfg.STREAMER_USER_ID, cfg.TEST_STREAMER_USER_ID]:
        print('Tiktok approval started')
        tiktok = database.select_tiktok_to_approve()
        print(tiktok)
        if tiktok is None:
            await context.bot.send_message(update.effective_chat.id,
                                           '–ï—â–µ –Ω–µ—Ç —Ç–∏–∫—Ç–æ–∫–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
            return ConversationHandler.END
        print('Sending tiktok info')
        await send_tiktok_info(update, context, tiktok, first_time=True)
        return WAITING_FOR_TIKTOK_DESISION


@update_user_info
async def show_video_to_approve(update: Update,
                                context: ContextTypes.DEFAULT_TYPE):
    # if update.effective_user.id == cfg.TEST_STREAMER_USER_ID:
    if update.effective_user.id in [cfg.STREAMER_USER_ID, cfg.TEST_STREAMER_USER_ID]:
        print('Tiktok approval started')
        tiktok = database.select_video_to_rate()
        print(tiktok)
        if tiktok is None:
            await context.bot.send_message(update.effective_chat.id,
                                           '–ï—â–µ –Ω–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –≤–µ—á–µ—Ä–∫–∞')
            return ConversationHandler.END
        print('Sending tiktok info')
        await send_tiktok_for_live(update, context, tiktok, first_time=True)
        return cfg.WAITING_FOR_VIDEO_MARK


async def send_tiktok_info(update, context, tiktok, first_time):
    if update.effective_user.id in [cfg.STREAMER_USER_ID, cfg.TEST_STREAMER_USER_ID]:
        print('Sending tiktok started')
        result = database.count_unsent_tiktoks()
        count = result['count'] if result is not None else None
        number_of_posts = count // 10
        sender = await database.get_user_info(tiktok['sender_user_id'])
        sender_name = sender['full_name']
        reply_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("üëç", callback_data=f'{APPROVE_TIKTOK}_{tiktok["tiktok_id"]}'),
                    InlineKeyboardButton("üëé", callback_data=f'{REJECT_TIKTOK}_{tiktok["tiktok_id"]}')
                ],
                [
                    InlineKeyboardButton("üî•üî•üî•", callback_data=f'{SUPER_APPROVE_TIKTOK}_{tiktok["tiktok_id"]}')
                ],
                [
                    InlineKeyboardButton("–ó–∞–±–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
                                         callback_data=f'{BAN_TIKTOK_SENDER}_{tiktok["tiktok_id"]}')
                ],
                [
                    InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç–±–æ—Ä", callback_data=f'{STOP_TIKTOKS_APPROVAL}_|')
                ]
            ]
        )
        print(reply_markup)
        caption = f"–û—Ç–ø—Ä–∞–≤–∏–ª - {sender_name}\n" \
                  f"–ù–∞–±—Ä–∞–Ω–æ –ø–æ—Å—Ç–æ–≤ —Ç–∏–∫—Ç–æ–∫–æ–≤: {number_of_posts}\n" \
                  f"{'–û—Ç–ø—Ä–∞–≤–∏—Ç—å: /publish' if number_of_posts != 0 else ''}"
        if first_time:
            await context.bot.send_video(update.effective_chat.id,
                                         video=tiktok['file_id'],
                                         caption=caption,
                                         reply_markup=reply_markup
                                         )
        else:
            chat_id = update.effective_chat.id
            message_id = update.effective_message.message_id
            try:
                sender = await database.get_user_info(tiktok['sender_user_id'])
                print(f'sender - {sender}')
                await context.bot.edit_message_media(
                    InputMediaVideo(tiktok['file_id'],
                                    caption=caption),
                    chat_id,
                    message_id)
                await context.bot.edit_message_reply_markup(chat_id, message_id,
                                                            reply_markup=reply_markup)
            except telegram.error.BadRequest:
                await context.bot.send_video(
                    chat_id=chat_id,
                    video=tiktok['file_id'],
                    caption=caption,
                    reply_markup=reply_markup)
        return cfg.WAITING_FOR_VIDEO_MARK


async def send_video_for_moderation(update, context, video_info):
    sender = await database.get_user_info(video_info['sender_user_id'])
    sender_name = sender['full_name']
    reply_markup = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("üëç", callback_data=f'{cfg.APPROVE_VIDEO}_{video_info["tiktok_id"]}'),
                InlineKeyboardButton("üëé", callback_data=f'{cfg.REJECT_VIDEO}_{video_info["tiktok_id"]}')
            ],
            [
                InlineKeyboardButton("–ó–∞–±–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
                                     callback_data=f'{cfg.BAN_VIDEO_SENDER}_{video_info["tiktok_id"]}')
            ]
        ]
    )
    print(reply_markup)
    caption = f"–û—Ç–ø—Ä–∞–≤–∏–ª - {sender_name}"
    chat_id = CHATS["MODERATION_GROUP"]
    await context.bot.send_video(chat_id,
                                 video=video_info['file_id'],
                                 caption=caption,
                                 reply_markup=reply_markup
                                 )


async def send_tiktok_for_live(update, context, tiktok, first_time):
    if update.effective_user.id in [cfg.STREAMER_USER_ID, cfg.TEST_STREAMER_USER_ID]:
        print('Sending tiktok for live started')
        sender = await database.get_user_info(tiktok['sender_user_id'])
        sender_name = sender['full_name']   # üî• üëç üòê üëé ü§Æ
        reply_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("üî•", callback_data=f'{cfg.VIDEO_EVENING_MARKING_STATES}_{tiktok["tiktok_id"]}_üî•'),
                    InlineKeyboardButton("üëç", callback_data=f'{cfg.VIDEO_EVENING_MARKING_STATES}_{tiktok["tiktok_id"]}_üëç'),
                    InlineKeyboardButton("üòê", callback_data=f'{cfg.VIDEO_EVENING_MARKING_STATES}_{tiktok["tiktok_id"]}_üòê'),
                    InlineKeyboardButton("üëé", callback_data=f'{cfg.VIDEO_EVENING_MARKING_STATES}_{tiktok["tiktok_id"]}_üëé'),
                    InlineKeyboardButton("ü§Æ", callback_data=f'{cfg.VIDEO_EVENING_MARKING_STATES}_{tiktok["tiktok_id"]}_ü§Æ')
                ],
                [
                    InlineKeyboardButton("–ó–∞–±–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
                                         callback_data=f'{cfg.BAN_VIDEO_SENDER_ON_MARKING}_{tiktok["tiktok_id"]}_|')
                ],
                [
                    InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç–±–æ—Ä", callback_data=f'{cfg.STOP_VIDEO_EVENING}_|')
                ]
            ]
        )
        print(reply_markup)
        caption = f"–û—Ç–ø—Ä–∞–≤–∏–ª - {sender_name}\n"
        if first_time:
            await context.bot.send_video(update.effective_chat.id,
                                         video=tiktok['file_id'],
                                         caption=caption,
                                         reply_markup=reply_markup
                                         )
        else:
            chat_id = update.effective_chat.id
            message_id = update.effective_message.message_id
            try:
                sender = await database.get_user_info(tiktok['sender_user_id'])
                print(f'sender - {sender}')
                await context.bot.edit_message_media(
                    InputMediaVideo(tiktok['file_id'],
                                    caption=caption),
                    chat_id,
                    message_id)
                await context.bot.edit_message_reply_markup(chat_id, message_id,
                                                            reply_markup=reply_markup)
            except telegram.error.BadRequest:
                await context.bot.send_video(
                    chat_id=chat_id,
                    video=tiktok['file_id'],
                    caption=caption,
                    reply_markup=reply_markup)

        return cfg.WAITING_FOR_VIDEO_MARK


@update_user_info
async def tiktok_approval_callback_handler(update: Update,
                                           context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in [cfg.STREAMER_USER_ID, cfg.TEST_STREAMER_USER_ID]:
        print('STARTING TO DEFINE TIKTOK ACTION')
        chat_id = update.effective_chat.id
        panel_message_id = update.effective_message.message_id
        data = update.callback_query.data.split('_')
        action = data[0]
        if action == str(APPROVE_TIKTOK) \
                or action == str(REJECT_TIKTOK) \
                or action == str(BAN_TIKTOK_SENDER) \
                or action == str(SUPER_APPROVE_TIKTOK):
            tiktok_id = int(data[1])
            tiktok = database.find_tiktok(tiktok_id)
            if tiktok is None:
                await context.bot.send_message(chat_id,
                                               '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ç–∏–∫—Ç–æ–∫–æ–º. –°–∫–∏–ø–∞–µ–º')
            else:
                sender_user_id = tiktok['sender_user_id']
                is_approved = action in [str(APPROVE_TIKTOK), str(SUPER_APPROVE_TIKTOK)]
                is_banned = action == str(BAN_TIKTOK_SENDER)
                if is_approved:
                    database.approve_tiktok(tiktok_id)
                    if action == str(APPROVE_TIKTOK):
                        message_text = '–í–ê–ê–ê–ê–ê–£, —Ç–∏–∫-—Ç–æ–∫ —à–∏–∫–∞—Ä–µ–Ω, –°–ü–û –°–ò –ë–û! –ù–∞—á–∏—Å–ª–∏–ª —Ç–µ–±–µ 10 –±–∞–ª–ª–æ–≤. –°–∫–∏–Ω—å –µ—â—ë: /send_tiktok'
                        points = int(cfg.BASE_ACCEPTED_TIKTOK_PRAISE)
                        database.add_points(sender_user_id, points)
                        logger.debug(
                            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–æ–ª—É—á–∏–ª {points} –±.')
                    else:
                        message_text = '–ï–ï–ï–ë–ê–¢–¨ –≠–¢–û –†–ê–ó–™–ï–ë —Ä–µ–∞–ª—å–Ω–æ –í–ê–£! –ù–∞—á–∏—Å–ª–∏–ª —Ç–µ–±–µ 100 –±–∞–ª–ª–æ–≤. –°–∫–∏–Ω—å –µ—â—ë: /send_tiktok'
                        points = int(cfg.BASE_FIRE_TIKTOK_PRAISE)
                        database.add_points(sender_user_id, points)
                        logger.debug(
                            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–æ–ª—É—á–∏–ª {points} –±.')
                else:
                    database.reject_tiktok(tiktok_id)
                    if is_banned:
                        ban_end_time = datetime.datetime.now() + datetime.timedelta(
                            hours=1)
                        ban_end_string = ban_end_time.strftime("%Y-%m-%d %H:%M:%S")
                        database.ban_user_from_tiktoks(sender_user_id,
                                                       ban_end_time)
                        message_text = f'–ß—Ç–æ —ç—Ç–æ? –§—É –±–ª! –¢—ã –≤ –ë–ê–ù–ï! –°–∏–¥–∏ –∂–¥–∏ —Ä–∞–∑–±–∞–Ω–∞ –¥–æ {ban_end_string}'
                    else:
                        message_text = '–ù–µ, —Ç—ã –º–æ–∂–µ—à—å –ª—É—á—à–µ, –∫–∏–¥–∞–π –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ) /send_tiktok'
                try:
                    await context.bot.send_message(sender_user_id,
                                                   message_text,
                                                   reply_to_message_id=tiktok[
                                                       'in_chat_message_id'],
                                                   allow_sending_without_reply=False)
                except:
                    sender_message = await context.bot.forward_message(
                        sender_user_id,
                        cfg.TIKTOK_FILES_GROUP_ID,
                        tiktok['message_id'])
                    sender_message_id = sender_message.message_id
                    await context.bot.send_message(sender_user_id,
                                                   message_text,
                                                   reply_to_message_id=sender_message_id)
            next_tiktok = database.select_tiktok_to_approve()
            if next_tiktok is not None:
                await next_tiktok_to_approve(update, context, next_tiktok)
            else:
                await context.bot.delete_message(chat_id, panel_message_id)
                await context.bot.send_message(chat_id,
                                               '–¢–∏–∫—Ç–æ–∫–∏ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å')
                return ConversationHandler.END
        elif action == str(STOP_TIKTOKS_APPROVAL):
            await context.bot.delete_message(chat_id, panel_message_id)
            await context.bot.send_message(chat_id,
                                           '–•–æ—Ä–æ—à–æ. –û—Ç–±–æ—Ä —Ç–∏–∫—Ç–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω')
            return ConversationHandler.END
        else:
            logger.debug("–®–û –ë–õ–ò–ù")


@update_user_info
async def video_approval_callback_handler(update: Update,
                                           context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in (cfg.config_data['CHATS']['ADMINS_LIST'] + cfg.config_data['CHATS']['TIKTOK_MODERATORS_LIST']):
        print('STARTING TO DEFINE VIDEO ACTION')
        chat_id = update.effective_chat.id
        data = update.callback_query.data.split('_')
        action = data[0]
        print(f'action - {action}')

        tiktok_id = int(data[1])
        tiktok = database.find_tiktok(tiktok_id)
        if tiktok is None:
            await context.bot.send_message(chat_id,
                                           '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Ç–∏–∫—Ç–æ–∫–æ–º. –°–∫–∏–ø–∞–µ–º')
        else:
            sender_user_id = tiktok['sender_user_id']
            is_approved = action in [str(cfg.APPROVE_VIDEO), str(cfg.SUPER_APPROVE_VIDEO)]
            is_banned = action == str(cfg.BAN_VIDEO_SENDER)
            print(f'is_banned - {is_banned}')
            if is_approved:
                database.approve_tiktok(tiktok_id)
                if action == str(cfg.APPROVE_VIDEO):
                    message_text = '–ù–∞–º–∞–Ω–∞, –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å—Ç—Ä–∏–º–µ üî• –ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å –µ—â—ë'
                    additional_caption = f'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {update.effective_user.name}'
                else:
                    message_text = '–¢—ã —Å—Ç–∞–ª –ª—é–±–∏–º—á–∏–∫–æ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ü•∞'
                    additional_caption = f'–ò–∑–±—Ä–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {update.effective_user.name}'
                    # points = int(cfg.BASE_FIRE_TIKTOK_PRAISE)
                    # database.add_points(sender_user_id, points)  # TODO –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –∑–∞ –≤—ã–±–æ—Ä –º–æ–¥–µ—Ä–∞
                    # logger.debug(
                    #     f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–æ–ª—É—á–∏–ª {points} –±.')
            else:
                database.reject_tiktok(tiktok_id)
                if is_banned:
                    ban_end_time = datetime.datetime.now() + datetime.timedelta(
                        hours=1)
                    ban_end_string = ban_end_time.strftime("%Y-%m-%d %H:%M:%S")
                    database.ban_user_from_tiktoks(sender_user_id,
                                                   ban_end_time)
                    message_text = f'üñï–Å–±–∏–∫ —Ç—ã –≤ –±–∞–Ω–µ –¥–æ {ban_end_string}'
                    additional_caption = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 1—á. (–¥–æ {ban_end_string}) –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {update.effective_user.name}'
                else:
                    if str(update.effective_user.id) != str(sender_user_id):
                        message_text = '–¢–∞–∫–æ–µ –Ω–µ–ª—å–∑—è –Ω–∞ —Å—Ç—Ä–∏–º–µ —Å–º–æ—Ç—Ä–µ—Ç—å,  –µ—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—à—å —Ç–∞–∫–æ–µ –∫–∏–¥–∞—Ç—å —Ç–µ–±—è –∑–∞–±–∞–Ω—è—Ç üò°'
                        additional_caption = f'–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {update.effective_user.name}'
                    else:
                        await update.callback_query.answer('–ù–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å —Å–≤–æ—ë —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ')
                        return
            caption = update.effective_message.caption + '\n' + additional_caption
            await update.effective_message.edit_caption(caption,
                                                        reply_markup=None)
            try:
                await context.bot.send_message(sender_user_id,
                                               message_text,
                                               reply_to_message_id=tiktok[
                                                   'in_chat_message_id'],
                                               allow_sending_without_reply=False)
            except:
                sender_message = await context.bot.forward_message(
                    sender_user_id,
                    cfg.TIKTOK_FILES_GROUP_ID,
                    tiktok['message_id'])
                sender_message_id = sender_message.message_id
                await context.bot.send_message(sender_user_id,
                                               message_text,
                                               reply_to_message_id=sender_message_id)


@update_user_info
async def video_rating_callback_handler(update: Update,
                                        context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in [cfg.STREAMER_USER_ID, cfg.TEST_STREAMER_USER_ID]:
        print('STARTING TO DEFINE VIDEO RATING ACTION')
        chat_id = update.effective_chat.id
        panel_message_id = update.effective_message.message_id
        data = update.callback_query.data.split('_')
        action = int(data[0])
        pprint.pprint(action)
        pprint.pprint(cfg.SEARCH_NEW_VIDEOS)
        if action == int(cfg.VIDEO_EVENING_MARKING_STATES):
            tiktok_id = int(data[1])
            tiktok = database.find_tiktok(tiktok_id)
            sender_user_id = tiktok['sender_user_id']
            print(f'sender_user_id - {sender_user_id}')
            # TODO –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
            mark_emoji = data[2]
            match mark_emoji:
                case 'üî•':
                    database.add_points(sender_user_id, 100)
                case 'üëç':
                    database.add_points(sender_user_id, 10)
                case 'üòê':
                    database.add_points(sender_user_id, 5)
                case 'üëé':
                    pass
                case 'ü§Æ':
                    database.subtract_points(sender_user_id, 10)
                case _:
                    pass
            database.mark_video(tiktok_id, mark_emoji)
        elif action == cfg.BAN_VIDEO_SENDER_ON_MARKING:
            video_id = int(data[1])
            video = database.find_tiktok(video_id)
            if video is None:
                await context.bot.send_message(chat_id,
                                               '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ç–∏–∫—Ç–æ–∫–æ–º. –°–∫–∏–ø–∞–µ–º')
            else:
                sender_user_id = video['sender_user_id']
                in_chat_message_id = video['in_chat_message_id']
                database.reject_tiktok(video_id)
                ban_end_time = datetime.datetime.now() + datetime.timedelta(
                    hours=1)
                ban_end_string = ban_end_time.strftime("%Y-%m-%d %H:%M:%S")
                database.ban_user_from_tiktoks(sender_user_id,
                                               ban_end_time)
                message_text = f'–ß—Ç–æ —ç—Ç–æ? –§—É –±–ª! –¢—ã –≤ –ë–ê–ù–ï! –°–∏–¥–∏ –∂–¥–∏ —Ä–∞–∑–±–∞–Ω–∞ –¥–æ {ban_end_string}'
                await context.bot.send_message(sender_user_id,
                                               message_text,
                                               reply_to_message_id=in_chat_message_id)
        elif action == cfg.STOP_VIDEO_EVENING:
            await context.bot.delete_message(chat_id, panel_message_id)
            await context.bot.send_message(chat_id,
                                           '–í–∏–¥–µ–æ-–≤–µ—á–µ—Ä–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ—Å—Ç —Å –∏—Ç–æ–≥–∞–º–∏ –±—É–¥–µ—Ç —Å–∫–æ—Ä–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ')
            await publish_video_evening_results(update, context)
            return ConversationHandler.END
        elif action == cfg.SEARCH_NEW_VIDEOS:
            pass
        else:
            logger.debug("–®–¢–ê")
        if action in [int(cfg.VIDEO_EVENING_MARKING_STATES), cfg.BAN_VIDEO_SENDER_ON_MARKING, cfg.SEARCH_NEW_VIDEOS]:
            new_video = database.select_video_to_rate()
            if new_video is not None:
                await next_video_to_rate(update, context, new_video)
            else:
                if update.effective_message.caption == '–í–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üòì –ü–æ–∏—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–¥–µ–æ–≤–µ—á–µ—Ä–æ–∫?':
                    new_caption = '–í–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò¢ –ü–æ–∏—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–¥–µ–æ–≤–µ—á–µ—Ä–æ–∫?'
                else:
                    new_caption = '–í–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üòì –ü–æ–∏—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–¥–µ–æ–≤–µ—á–µ—Ä–æ–∫?'
                await update.effective_message.edit_media(InputMediaVideo(open('pedro.mp4', 'rb'),
                                                                          new_caption),
                                                          reply_markup=InlineKeyboardMarkup(
                                                              [
                                                                  [InlineKeyboardButton('–ü–æ–∏—Å–∫–∞—Ç—å –µ—â—ë',
                                                                                      callback_data=f'{cfg.SEARCH_NEW_VIDEOS}'),],
                                                                  [InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å',
                                                                                      callback_data=f'{cfg.STOP_VIDEO_EVENING}')],
                                                              ]))



@update_user_info
async def next_tiktok_to_approve(update: Update,
                                 context: ContextTypes.DEFAULT_TYPE,
                                 next_tiktok):
    if update.effective_user.id == cfg.STREAMER_USER_ID:
        await send_tiktok_info(update, context, next_tiktok, first_time=False)


@update_user_info
async def next_video_to_rate(update: Update,
                             context: ContextTypes.DEFAULT_TYPE,
                             next_video):
    if update.effective_user.id in [cfg.STREAMER_USER_ID, cfg.TEST_STREAMER_USER_ID]:
        await send_tiktok_for_live(update, context, next_video, first_time=False)


async def publish_video_evening_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    videos = database.select_videos_to_publish()
    if videos is None:
        await update.effective_message.reply_text('–°–µ–≥–æ–¥–Ω—è –Ω–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É üòì')
        return
    published_videos = []
    media = []
    videos_string = '<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –≤–∏–¥–µ–æ–≤–µ—á–µ—Ä–∫–∞:</b>'
    videos_count = 0
    print(videos)
    for video in videos:
        if video['live_mark'] in ['üëç', 'üî•']:
            videos_count += 1
            print(dict(video))
            published_videos.append((str(video['tiktok_id']),))
            media.append(InputMediaVideo(video['file_id']))
            sender = await database.get_user_info(video['sender_user_id'])
            videos_string = videos_string + f'\n{videos_count} –≤–∏–¥–æ—Å –æ—Ç–ø—Ä–∞–≤–∏–ª {sender["full_name"]} {("(" + sender["nickname"] + ")") if sender["nickname"] is not None else "" ""}. –û—Ü–µ–Ω–∫–∞ - {video["live_mark"]}'
    database.publish_videos(published_videos)
    threads = ['tiktoks', 'comments']
    for thread in threads:
        await context.bot.send_media_group(cfg.FORUM_ID,
                                           media=media, caption=videos_string, parse_mode=ParseMode.HTML,
                                           message_thread_id=cfg.config_data['CHATS']['FORUM_THREADS'][thread])
        time.sleep(5)
    await context.bot.send_media_group(cfg.CHANNEL_ID,
                                       media=media, parse_mode=ParseMode.HTML, caption=videos_string)


# TODO "–í—ã–±–æ—Ä –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"
# TODO –û–ø—Ä–æ—Å –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π —Å–ø—Ä–æ—Å–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –æ–ø—Ä–æ—Å—É
# TODO –°–ø—Ä–∞—à–∏–≤–∞—Ç—å —á—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ—Å—Ç–µ —Å —Ç–∏–∫—Ç–æ–∫ –≤–µ—á–µ—Ä–∫–æ–º –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
# TODO –ö–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ç–∏–∫—Ç–æ–∫—É –≤–æ –≤—Ä–µ–º—è –æ—Ü–µ–Ω–∫–∏