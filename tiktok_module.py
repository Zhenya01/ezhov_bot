# -*- coding: utf-8 -*-
import datetime
import os
import re
import shutil

import pytz
import requests
import telegram.error
import urllib3
from pytube import YouTube
from pytube import exceptions as pytube_exceptions
from telegram import Update, InputMediaVideo, InlineKeyboardMarkup, \
    InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from telegram.helpers import create_deep_linked_url

import database
import helpers_module
import regs

from helpers_module import logger
from helpers_module import update_user_info
from helpers_module import SEND_TIKTOK_DEEPLINK
from helpers_module import WAITING_FOR_TIKTOK, WAITING_FOR_TIKTOK_DESISION
from helpers_module import APPROVE_TIKTOK, REJECT_TIKTOK, \
    STOP_TIKTOKS_APPROVAL, BAN_TIKTOK_SENDER


async def start_ticktock_evening(update: Update,
                                 context: ContextTypes.DEFAULT_TYPE):
    if regs.ezhov_broadcaster_id not in context.bot_data:
        context.bot_data[regs.ezhov_broadcaster_id] = {}
    context.bot_data[regs.ezhov_broadcaster_id][
        'ticktock_evening_active'] = True
    bot = await context.bot.get_me()
    url = create_deep_linked_url(bot.username, f'{SEND_TIKTOK_DEEPLINK}')
    threads = ['tiktoks', 'comments']
    text = '''
–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–æ—Ä –≤–∏–¥–µ–æ –Ω–∞ –¢–∏–∫-–¢–æ–∫ –≤–µ—á–µ—Ä–æ–∫! 
–ü—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å—Ç–µ –≤–∏–¥–µ–æ –±–æ—Ç—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É.
–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ –°–ö–ê–ß–ê–ù–ù–´–ï —Å —Ç–∏–∫-—Ç–æ–∫–∞! –°—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∏–∫-—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)'''
    for thread in threads:
        await context.bot.send_message(regs.ezhov_forum_id, text, message_thread_id=regs.ezhov_forum_threads[thread],
                                       reply_markup=InlineKeyboardMarkup(
                                           [[InlineKeyboardButton(
                                               "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–∫—Ç–æ–∫", url=url)]]))
    # await context.bot.send_message(regs.tiktoks_channel_id, text,
    #                                reply_markup=InlineKeyboardMarkup(
    #                                    [[InlineKeyboardButton(
    #                                        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–∫—Ç–æ–∫", url=url)]]))


async def test_thread_sending(update: Update,
                              context: ContextTypes.DEFAULT_TYPE):
    threads = ['tiktoks', 'comments']
    text = 'T–µ—Å—Ç. –ë–∏–ø-–±–æ–ø. –°–æ—Ä—è–Ω –∑–∞ —Ñ–ª—É–¥ –∑–∞—Ä–∞–Ω–µ–µ)'
    for thread in threads:
        logger.debug(
            f'{update.effective_user.name}({update.effective_user.id}) thread_id - {regs.ezhov_forum_threads[thread]}')
        await context.bot.send_message(regs.ezhov_forum_id, text, message_thread_id=regs.ezhov_forum_threads[thread])

@update_user_info
async def waiting_for_ticktock(update: Update,
                               context: ContextTypes.DEFAULT_TYPE):
    logger.debug(
        f'{update.effective_user.name}({update.effective_user.id}) –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /send_tiktok')
    if not ('ticktock_evening_active' in context.bot_data[regs.ezhov_broadcaster_id] and context.bot_data[regs.ezhov_broadcaster_id][
                'ticktock_evening_active'] is True):
        logger.debug(
            f'{update.effective_user.name}({update.effective_user.id}). –¢–∏–∫—Ç–æ–∫ –≤–µ—á–µ—Ä–æ–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –û—Ç–º–µ–Ω—è–µ–º')
        await context.bot.send_message(update.effective_chat.id,
                                       '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–∫—Ç–æ–∫–∏.'
                                       '–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ')
        return ConversationHandler.END
    unapproved_tiktoks_count = \
    database.count_unapproved_tiktoks(update.effective_user.id)['count']
    user_info = context.user_data['user_info']
    can_send_tiktok = user_info['can_send_tiktok']
    print(f'can_send_tiktok - {can_send_tiktok}')
    if not can_send_tiktok:
        tiktoks_banned_until = user_info['tiktoks_banned_until']
        print(f'tiktoks_banned_until - {tiktoks_banned_until},'
              f'datetime.now() - {datetime.datetime.now()}')
        if tiktoks_banned_until < datetime.datetime.now():
            can_send_tiktok = True
            database.unban_user_from_tiktoks(update.effective_user.id)
    if unapproved_tiktoks_count > 9:
        await context.bot.send_message(update.effective_chat.id,
                                       '–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 10 –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ –æ–¥–∏–Ω –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏. –ü–æ–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–∫—Ç–æ–∫–∏')
    elif not can_send_tiktok:
        time_banned_string = tiktoks_banned_until.strftime("%Y-%m-%d %H:%M:%S")
        await context.bot.send_message(update.effective_chat.id,
                                       f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–∫—Ç–æ–∫–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–µ–Ω—ã —Å—Ç—Ä–∏–º–µ—Ä–æ–º (–¥–æ {time_banned_string})')
    else:
        logger.debug(
            f'{update.effective_user.name}({update.effective_user.id}) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–∞–π–ª')
        await context.bot.send_message(update.effective_chat.id,
                                       '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∏–¥–µ–æ —Ç–∏–∫—Ç–æ–∫–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ youtube shorts. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ 1 –≤–∏–¥–µ–æ. –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –º–Ω–æ–≥–æ - —è –ø—Ä–∏–º—É —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ')
        return WAITING_FOR_TIKTOK


@update_user_info
async def download_youtube_short(update: Update,
                                 context: ContextTypes.DEFAULT_TYPE,
                                 video_url):
    if not (re.match("^https://(www.)?youtube\.", video_url) or re.match(
            "^https://youtu.be", video_url)):
        await context.bot.send_message(update.effective_chat.id,
                                       "–°—Å—ã–ª–∫–∞ –Ω–µ –∏–∑ youtube shorts. –Ø –ø–æ–∫–∞ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –∏–∑ youtube shorts. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ /cancel")
        return WAITING_FOR_TIKTOK

    try:
        video = YouTube(video_url)
        print(f'video - {video}')
        if video.length > 60:
            await context.bot.send_message(update.effective_chat.id,
                                           "–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤–∏–¥–µ–æ –¥–æ 1 –º–∏–Ω—É—Ç—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel")
            return WAITING_FOR_TIKTOK
        try:
            stream = video.streams.filter(progressive=True,
                                          file_extension='mp4').order_by(
                'resolution').desc().first()
            return stream.download()
        except pytube_exceptions.VideoUnavailable:
            await context.bot.send_message(update.effective_chat.id,
                                           '–≠—Ç–æ –≤–∏–¥–µ–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ /cancel')
            return WAITING_FOR_TIKTOK
    except pytube_exceptions.RegexMatchError:
        await context.bot.send_message(update.effective_chat.id,
                                       "–°—Å—ã–ª–∫–∞ –Ω–µ –∏–∑ youtube shorts. –Ø –ø–æ–∫–∞ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –∏–∑ youtube shorts. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ /cancel")
        return WAITING_FOR_TIKTOK


@update_user_info
async def download_tiktok_video(update: Update,
                                context: ContextTypes.DEFAULT_TYPE,
                                tiktok_url):
    api_url = "https://aiov-download-youtube-videos.p.rapidapi.com/GetVideoDetails"
    querystring = {"URL": tiktok_url}
    headers = {
        "X-RapidAPI-Key": regs.x_rapid_api_key,
        "X-RapidAPI-Host": "aiov-download-youtube-videos.p.rapidapi.com"
    }
    response = requests.request("GET", api_url, headers=headers,
                                params=querystring)
    if response.status_code != 200:
        await context.bot.send_message(update.effective_chat.id,
                                       '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏. –õ—É—á—à–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–º')
        return None
    response = response.json()
    if response['extractor'] != 'TikTok':
        await context.bot.send_message(update.effective_chat.id,
                                       '–§–∞–π–ª –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–µ –∏–∑ —Ç–∏–∫—Ç–æ–∫–∞. –Ø –ø–æ–∫–∞ –º–æ–≥—É —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–∏–∫—Ç–æ–∫–∏ üò¢. –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –≤–∏–¥–µ–æ')
        return None
    extension = response['ext']
    if extension != 'mp4' and extension != 'mov':
        await context.bot.send_message(update.effective_chat.id,
                                       '–Ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–∞–∫–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫–∞–∫ –≤ —Ñ–∞–π–ª–µ –∏–∑ —Å—Å—ã–ª–∫–∏. –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –≤–∏–¥–µ–æ')
        return None
    if response['filesize'] > 52428800:
        await context.bot.send_video(update.effective_chat.id,
                                     '–§–∞–π–ª –∏–∑ —Å—Å—ã–ª–∫–∏ –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ 50 –º–±. –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –≤–∏–¥–µ–æ')
        return None
    file_name = f'tiktok_video-{update.effective_user.id}.mp4' if extension == 'mp4' else f'tiktok_video_{update.effective_user.id}.mov'
    url = response['formats'][0]['url']
    print(url)
    connection = urllib3.PoolManager()
    with connection.request('GET', url, preload_content=False) as resp, open(
            file_name, 'wb') as out_file:
        shutil.copyfileobj(resp, out_file)

    resp.release_conn()
    return file_name


@update_user_info
async def got_tiktok_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = await got_tiktok(update, context, is_file=True)
    return state


@update_user_info
async def got_tiktok_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = await got_tiktok(update, context, is_file=False)
    return state


@update_user_info
async def got_tiktok(update: Update,
                     context: ContextTypes.DEFAULT_TYPE,
                     is_file):
    if is_file:
        message = await context.bot.forward_message(regs.ezhov_files_group_id,
                                                    update.effective_chat.id,
                                                    update.effective_message.id)
    else:
        result = await download_youtube_short(update, context,
                                              update.effective_message.text)
        if result == WAITING_FOR_TIKTOK:
            return WAITING_FOR_TIKTOK
        file_path = result
        message = await context.bot.send_video(regs.ezhov_files_group_id,
                                               video=file_path,
                                               caption=update.message.text)
        os.remove(file_path)
    file_id = message.video.file_id
    forwarded_message_id = message.message_id
    is_approved = update.effective_user.id == regs.ezhov_user_id
    database.add_tiktok(forwarded_message_id, update.effective_user.id,
                        file_id,
                        is_approved, update.effective_message.id)
    message_text = '–Ø –ø–æ—Å–º–æ—Ç—Ä—é, –∞ –ø–æ–∫–∞' if not is_approved \
        else '–¢–∏–∫—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
    unapproved_count = database.count_unapproved_tiktoks(update.effective_user.id)['count']
    if unapproved_count <= 9:
        message_text += ' –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ) /send_tiktok'
    else:
        message_text += ' –æ—Ç–¥–æ—Ö–Ω–∏) –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ. –Ø –Ω–∞–ø–∏—à—É, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë'
    if unapproved_count == 5:
        context.bot.send_message(regs.ezhov_user_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.full_name} —É–∂–µ –∏–º–µ–µ—Ç 5 –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ç–∏–∫—Ç–æ–∫–æ–≤. –°–∫–æ—Ä–æ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–∫—Ç–æ–∫–∏. –ü–æ—Ä–∞ –±—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å :)')
    await context.bot.send_message(update.effective_chat.id, message_text)
    return ConversationHandler.END


@update_user_info
async def got_wrong_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.effective_attachment is not None:
        await context.bot.send_message(update.effective_chat.id,
                                       '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –≤–∏–¥–µ–æ, –∞ –¥—Ä—É–≥–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ç–∏–∫—Ç–æ–∫–∞')
    else:
        await context.bot.send_message(update.effective_chat.id,
                                       '–Ø –∂–¥—É –≤–∏–¥–µ–æ, —Å—Å—ã–ª–∫—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /cancel')
    return WAITING_FOR_TIKTOK


@update_user_info
async def cancel_waiting_for_tiktok(update: Update,
                                    context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(update.effective_chat.id,
                                   '–û–∫. –û—Ç–º–µ–Ω–∏–ª. –¢–µ–ø–µ—Ä—å —è –Ω–∏—á–µ–≥–æ –Ω–µ –∂–¥—É')
    return ConversationHandler.END


@update_user_info
async def publish_ticktocks(update: Update,
                            context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == regs.ezhov_user_id:
        media = []
        caption = '–°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∫—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤–∏–¥–µ–≤–∞!)\n'
        names = []
        ticktoks = database.select_tiktoks_to_send()
        if ticktoks is not None:
            for ticktok in ticktoks:
                user = await database.get_user_info(ticktok["sender_user_id"])
                media.append(InputMediaVideo(ticktok['file_id']))
                if update.effective_user.id != regs.ezhov_user_id:
                    names.append(user["full_name"])
                    # caption = caption + f'{ticktoks.index(ticktok) + 1}–π —Ç–∏–∫—Ç–æ–∫ –ø—Ä–∏—Å–ª–∞–ª(–∞) {user["full_name"]}\n'

            caption += helpers_module.generate_tiktok_senders_string(names)
            logger.debug(f'caption - {caption}')

            await context.bot.send_media_group(regs.tiktoks_channel_id,
                                               media=media, caption=caption)
            for tiktok in ticktoks:
                database.tiktok_posted(tiktok['tiktok_id'])
        else:
            await context.bot.send_message(update.effective_chat.id,
                                           '–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∏–∫—Ç–æ–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')


@update_user_info
async def show_tiktok_to_approve(update: Update,
                                 context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == regs.ezhov_user_id:
        tiktok = database.select_tiktok_to_approve()
        if tiktok is None:
            await context.bot.send_message(update.effective_chat.id,
                                           '–ï—â–µ –Ω–µ—Ç —Ç–∏–∫—Ç–æ–∫–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
            return ConversationHandler.END
        await send_tiktok_info(update, context, tiktok, first_time=True)
        return WAITING_FOR_TIKTOK_DESISION


async def send_tiktok_info(update, context, tiktok, first_time):
    if update.effective_user.id == regs.ezhov_user_id:
        result = database.count_unsent_tiktoks()
        count = result['count'] if result is not None else None
        number_of_posts = count // 10
        sender = await database.get_user_info(tiktok['sender_user_id'])
        sender_name = sender['full_name']
        reply_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("üëç", callback_data=f'{APPROVE_TIKTOK}_{tiktok["tiktok_id"]}'),
                    InlineKeyboardButton("üëé", callback_data=f'{REJECT_TIKTOK}_{tiktok["tiktok_id"]}')
                ],
                [
                    InlineKeyboardButton("–ó–∞–±–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", callback_data=f'{BAN_TIKTOK_SENDER}_{tiktok["tiktok_id"]}')
                ],
                [
                    InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç–±–æ—Ä", callback_data=f'{STOP_TIKTOKS_APPROVAL}_|')
                ]
            ]
        )
        print(reply_markup)
        caption = f"–û—Ç–ø—Ä–∞–≤–∏–ª - {sender_name}\n" \
                  f"–ù–∞–±—Ä–∞–Ω–æ –ø–æ—Å—Ç–æ–≤ —Ç–∏–∫—Ç–æ–∫–æ–≤: {number_of_posts}\n" \
                  f"{'–û—Ç–ø—Ä–∞–≤–∏—Ç—å: /publish' if number_of_posts != 0 else ''}"
        if first_time:
            await context.bot.send_video(update.effective_chat.id,
                                         video=tiktok['file_id'],
                                         caption=caption,
                                         reply_markup=reply_markup
                                         )
        else:
            chat_id = update.effective_chat.id
            message_id = update.effective_message.message_id
            try:
                sender = await database.get_user_info(tiktok['sender_user_id'])
                print(f'sender - {sender}')
                await context.bot.edit_message_media(
                    InputMediaVideo(tiktok['file_id'],
                                    caption=caption),
                    chat_id,
                    message_id)
                await context.bot.edit_message_reply_markup(chat_id, message_id,
                                                            reply_markup=reply_markup)
            except telegram.error.BadRequest:
                await context.bot.send_video(
                    chat_id=chat_id,
                    video=tiktok['file_id'],
                    caption=caption,
                    reply_markup=reply_markup)


@update_user_info
async def tiktok_approval_callback_handler(update: Update,
                                           context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == regs.ezhov_user_id:
        print('STARTING TO DEFINE TIKTOK ACTION')
        chat_id = update.effective_chat.id
        panel_message_id = update.effective_message.message_id
        data = update.callback_query.data.split('_')
        action = data[0]
        print(f'action - {action}')
        if action == str(APPROVE_TIKTOK) or action == str(
                REJECT_TIKTOK) or action == str(BAN_TIKTOK_SENDER):
            tiktok_id = int(data[1])
            tiktok = database.find_tiktok(tiktok_id)
            if tiktok is None:
                await context.bot.send_message(chat_id,
                                               '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ç–∏–∫—Ç–æ–∫–æ–º. –°–∫–∏–ø–∞–µ–º')
            else:
                sender_user_id = tiktok['sender_user_id']
                is_approved = action == str(APPROVE_TIKTOK)
                is_banned = action == str(BAN_TIKTOK_SENDER)
                print(f'is_banned - {is_banned}')
                if is_approved:
                    database.approve_tiktok(tiktok_id)
                    message_text = '–í–ê–ê–ê–ê–ê–£, —Ç–∏–∫-—Ç–æ–∫ —à–∏–∫–∞—Ä–µ–Ω, –°–ü–û –°–ò –ë–û! –°–∫–∏–Ω—å –µ—â—ë: /send_tiktok'
                else:
                    database.reject_tiktok(tiktok_id)
                    if is_banned:
                        ban_end_time = datetime.datetime.now() + datetime.timedelta(
                            hours=1)
                        ban_end_string = ban_end_time.strftime("%Y-%m-%d %H:%M:%S")
                        database.ban_user_from_tiktoks(sender_user_id,
                                                       ban_end_time)
                        message_text = f'–ß—Ç–æ —ç—Ç–æ? –§—É –±–ª! –¢—ã –≤ –ë–ê–ù–ï! –°–∏–¥–∏ –∂–¥–∏ —Ä–∞–∑–±–∞–Ω–∞ –¥–æ {ban_end_string}'
                    else:
                        message_text = '–ù–µ, —Ç—ã –º–æ–∂–µ—à—å –ª—É—á—à–µ, –∫–∏–¥–∞–π –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ) /send_tiktok'
                try:
                    await context.bot.send_message(sender_user_id,
                                                   message_text,
                                                   reply_to_message_id=tiktok[
                                                       'in_chat_message_id'],
                                                   allow_sending_without_reply=False)
                except:
                    sender_message = await context.bot.forward_message(
                        sender_user_id,
                        regs.ezhov_files_group_id,
                        tiktok['message_id'])
                    sender_message_id = sender_message.message_id
                    await context.bot.send_message(sender_user_id,
                                                   message_text,
                                                   reply_to_message_id=sender_message_id)
            next_tiktok = database.select_tiktok_to_approve()
            if next_tiktok is not None:
                await next_tiktok_to_approve(update, context, next_tiktok)
            else:
                await context.bot.delete_message(chat_id, panel_message_id)
                await context.bot.send_message(chat_id,
                                               '–¢–∏–∫—Ç–æ–∫–∏ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å')
                return ConversationHandler.END
        elif action == str(STOP_TIKTOKS_APPROVAL):
            await context.bot.delete_message(chat_id, panel_message_id)
            await context.bot.send_message(chat_id,
                                           '–•–æ—Ä–æ—à–æ. –û—Ç–±–æ—Ä —Ç–∏–∫—Ç–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω')
            return ConversationHandler.END


@update_user_info
async def next_tiktok_to_approve(update: Update,
                                 context: ContextTypes.DEFAULT_TYPE,
                                 next_tiktok):
    if update.effective_user.id == regs.ezhov_user_id:
        await send_tiktok_info(update, context, next_tiktok, first_time=False)

    # reply_markup = InlineKeyboardMarkup(
    #     [
    #         [
    #             InlineKeyboardButton("üëç",
    #                                  callback_data=f'{APPROVE_TIKTOK}_{next_tiktok["tiktok_id"]}'),
    #             InlineKeyboardButton("üëé",
    #                                  callback_data=f'{REJECT_TIKTOK}_{next_tiktok["tiktok_id"]}')
    #         ],
    #
    #         [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç–±–æ—Ä",
    #                               callback_data=f'{STOP_TIKTOKS_APPROVAL}_')]
    #     ]
    # )
    # chat_id = update.effective_chat.id
    # message_id = update.effective_message.message_id
    # try:
    #     sender = await database.get_user_info(next_tiktok['sender_user_id'])
    #     print(f'sender - {sender}')
    #     await context.bot.edit_message_media(
    #         InputMediaVideo(next_tiktok['file_id'],
    #                         caption=f'–û—Ç–ø—Ä–∞–≤–∏–ª - {sender["full_name"]}'),
    #         chat_id,
    #         message_id)
    #     await context.bot.edit_message_reply_markup(chat_id, message_id, reply_markup=reply_markup)
    # except telegram.error.BadRequest:
    #     await context.bot.send_video(
    #         chat_id=chat_id,
    #         video=next_tiktok['file_id'],
    #         caption=f'–û—Ç–ø—Ä–∞–≤–∏–ª - {next_tiktok["sender_user_id"]}',
    #         reply_markup=reply_markup)
